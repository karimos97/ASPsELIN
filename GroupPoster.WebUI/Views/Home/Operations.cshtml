@{
    ViewData["Title"] = "Groups";
}

<h1>Operation</h1>
<div class="col-12">
    <label>Groups</label>
    <select class="form-control" v-model="Group">
        <option v-for="group in groups" :value="group.link">{{group.name}}</option>
    </select>
    <label>Posts</label>
    <select class="form-control" v-model="Post">
        <option v-for="post in posts" :value="post.content">{{post.title}}</option>
    </select>
    <input type="checkbox" v-model="RandomAccount" id="random" name="random" />
    <label for="random my-4">Select Random Account</label>
    <div class="text-center">
        <button class="btn btn-primary my-4 px-auto" v-on:click="PostToGroup" :disabled="Posting">Post</button>
    </div>
</div>

<table class="table table-striped table-inverse">
    <thead>
        <tr class="d-flex">
            <th scope="col" class="col-1">#</th>
            <th scope="col" class="col-3">Email</th>
            <th scope="col" class="col-6">Password</th>
            <th scope="col" class="col-2">Selected</th>
        </tr>
    </thead>
    <tbody>
        <tr v-for="account in accounts" class="d-flex">
            <td class="col-1">{{account.id}}</td>
            <td class="col-3">{{account.email}}</td>
            <td class="col-6">{{account.password}}</td>
            <td class="col-2">
                <input type="checkbox" v-model="account.selected" />
            </td>
        </tr>
    </tbody>
</table>

@section Scripts
{
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                accountapi: '../api/accounts',
                actionapi: '../api/actions',
                groupapi: '../api/groups',
                postapi: '../api/posts',
                RandomAccount: false,
                Posting: false,
                accounts: [],
                groups: [],
                posts: [],
                Group: {},
                Post: {}
            },

            created() {
                this.GetAccounts();
                this.GetGroups();
                this.GetPosts();
            },

            methods: {

                GetAccounts: function () {
                    axios.get(this.accountapi).then(response => {
                        for (var i = 0; i < response.data.length; i++) {
                            this.accounts.push(this.CreateAccount(response.data[i]));
                        }
                    });
                },

                GetGroups: function () {
                    axios.get(this.groupapi).then(response => {
                        console.log(response.data);
                        for (var i = 0; i < response.data.length; i++) {
                            this.groups.push(response.data[i]);
                        }
                    });
                },

                GetPosts: function () {
                    axios.get(this.postapi).then(response => {
                        for (var i = 0; i < response.data.length; i++) {
                            this.posts.push(response.data[i]);
                        }
                    });
                },

                PostToGroup: function () {
                    this.Posting = true;
                    var checkSelection = this.CheckSelection();
                    if (checkSelection === true) {
                        if (typeof this.Group == 'string' && typeof this.Post == 'string') {
                            var data = this.GetData();
                            axios.post(this.actionapi, { link: this.Group, content: this.Post, emails: data.emails, passwords: data.passwords }).then(Response => {
                                this.Posting = false;
                                alert("Completed!");
                            });
                        }
                        else {
                            this.Posting = false;
                            alert("Select Group And Post!");
                        }
                        return;
                    }
                    this.Posting = false;
                    alert("Select Accounts!");
                },

                GetData: function () {
                    var data = {
                        emails: [],
                        passwords: []
                    };

                    if (this.RandomAccount) {
                        var account = this.accounts[Math.floor(this.accounts.length * Math.random())];
                        data.emails.push(account.email);
                        data.passwords.push(account.password);
                    }
                    else {
                        for (var i = 0; i < this.accounts.length; i++) {
                            if (this.accounts[i].selected) {
                                data.emails.push(this.accounts[i].email);
                                data.passwords.push(this.accounts[i].password);
                            }
                        }
                    }

                    return data;
                },

                CheckSelection: function () {
                    for (var i = 0; i < this.accounts.length; i++) {
                        if (this.accounts[i].selected === true) return true;
                    }

                    return this.RandomAccount;
                },

                CreateAccount: function (account) {
                    return {
                        id: account.id,
                        email: account.email,
                        password: account.password,
                        selected: false
                    }
                }
            }
        });
    </script>
}